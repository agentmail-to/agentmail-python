# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...types.count import Count
from ...types.last_key import LastKey
from ...types.limit import Limit
from .draft_item import DraftItem


class ListDraftsResponse(UniversalBaseModel):
    """
    Examples
    --------
    from agentmail.drafts import ListDraftsResponse
    from agentmail.drafts import DraftItem
    import datetime
    from agentmail.messages import Attachment
    ListDraftsResponse(drafts=[DraftItem(inbox_id='yourinbox@agentmail.to', thread_id='thread_123', draft_id='draft_123', event_id='event_123', labels=['RECEIVED', 'UNREAD'], updated_at=datetime.datetime.fromisoformat("2024-01-15 09:30:00+00:00", ), created_at=datetime.datetime.fromisoformat("2024-01-15 09:30:00+00:00", ), to=['bob@example.com'], subject='Project Discussion', preview="Let's review the timeline for the project.", cc=['charlie@example.com'], bcc=['david@example.com'], attachments=[Attachment(attachment_id='att_123', filename='proposal.pdf', content_type='application/pdf', size=1024, inline=False, )], ), DraftItem(inbox_id='yourinbox@agentmail.to', thread_id='thread_123', draft_id='draft_456', event_id='event_456', labels=['SENT'], updated_at=datetime.datetime.fromisoformat("2024-01-15 10:15:00+00:00", ), created_at=datetime.datetime.fromisoformat("2024-01-15 10:15:00+00:00", ), to=['alice@example.com'], subject='Re: Project Discussion', preview="Sounds good, let's meet tomorrow.", )], limit=10, count=2, last_key='draft_456#2024-01-15T10:15:00Z', )
    """

    count: Count
    limit: typing.Optional[Limit] = None
    last_key: typing.Optional[LastKey] = None
    drafts: typing.List[DraftItem] = pydantic.Field()
    """
    Draft items. Ordered by `updated_at` descending.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
