# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.last_key import LastKey
from ..types.limit import Limit
from .raw_client import AsyncRawInboxesClient, RawInboxesClient
from .types.display_name import DisplayName
from .types.inbox import Inbox
from .types.inbox_id import InboxId
from .types.list_inboxes_response import ListInboxesResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class InboxesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawInboxesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawInboxesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawInboxesClient
        """
        return self._raw_client

    def list(
        self,
        *,
        limit: typing.Optional[Limit] = None,
        last_key: typing.Optional[LastKey] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListInboxesResponse:
        """
        Parameters
        ----------
        limit : typing.Optional[Limit]

        last_key : typing.Optional[LastKey]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListInboxesResponse

        Examples
        --------
        from agentmail import AgentMail
        client = AgentMail(api_key="YOUR_API_KEY", )
        client.inboxes.list(limit=10, last_key='123e4567-e89b-12d3-a456-426614174000', )
        """
        _response = self._raw_client.list(limit=limit, last_key=last_key, request_options=request_options)
        return _response.data

    def get(self, inbox_id: InboxId, *, request_options: typing.Optional[RequestOptions] = None) -> Inbox:
        """
        Parameters
        ----------
        inbox_id : InboxId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Inbox

        Examples
        --------
        from agentmail import AgentMail
        client = AgentMail(api_key="YOUR_API_KEY", )
        client.inboxes.get(inbox_id='yourinbox@agentmail.to', )
        """
        _response = self._raw_client.get(inbox_id, request_options=request_options)
        return _response.data

    def create(
        self,
        *,
        username: typing.Optional[str] = OMIT,
        domain: typing.Optional[str] = OMIT,
        display_name: typing.Optional[DisplayName] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Inbox:
        """
        Parameters
        ----------
        username : typing.Optional[str]
            Username of address. Randomly generated if not specified.

        domain : typing.Optional[str]
            Domain of address. Must be verified domain. Defaults to `agentmail.to`.

        display_name : typing.Optional[DisplayName]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Inbox

        Examples
        --------
        from agentmail import AgentMail
        client = AgentMail(api_key="YOUR_API_KEY", )
        client.inboxes.create(username='yourinbox', display_name='Your Inbox', )
        """
        _response = self._raw_client.create(
            username=username, domain=domain, display_name=display_name, request_options=request_options
        )
        return _response.data


class AsyncInboxesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawInboxesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawInboxesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawInboxesClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        limit: typing.Optional[Limit] = None,
        last_key: typing.Optional[LastKey] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListInboxesResponse:
        """
        Parameters
        ----------
        limit : typing.Optional[Limit]

        last_key : typing.Optional[LastKey]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListInboxesResponse

        Examples
        --------
        from agentmail import AsyncAgentMail
        import asyncio
        client = AsyncAgentMail(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.inboxes.list(limit=10, last_key='123e4567-e89b-12d3-a456-426614174000', )
        asyncio.run(main())
        """
        _response = await self._raw_client.list(limit=limit, last_key=last_key, request_options=request_options)
        return _response.data

    async def get(self, inbox_id: InboxId, *, request_options: typing.Optional[RequestOptions] = None) -> Inbox:
        """
        Parameters
        ----------
        inbox_id : InboxId

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Inbox

        Examples
        --------
        from agentmail import AsyncAgentMail
        import asyncio
        client = AsyncAgentMail(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.inboxes.get(inbox_id='yourinbox@agentmail.to', )
        asyncio.run(main())
        """
        _response = await self._raw_client.get(inbox_id, request_options=request_options)
        return _response.data

    async def create(
        self,
        *,
        username: typing.Optional[str] = OMIT,
        domain: typing.Optional[str] = OMIT,
        display_name: typing.Optional[DisplayName] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Inbox:
        """
        Parameters
        ----------
        username : typing.Optional[str]
            Username of address. Randomly generated if not specified.

        domain : typing.Optional[str]
            Domain of address. Must be verified domain. Defaults to `agentmail.to`.

        display_name : typing.Optional[DisplayName]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Inbox

        Examples
        --------
        from agentmail import AsyncAgentMail
        import asyncio
        client = AsyncAgentMail(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.inboxes.create(username='yourinbox', display_name='Your Inbox', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            username=username, domain=domain, display_name=display_name, request_options=request_options
        )
        return _response.data
