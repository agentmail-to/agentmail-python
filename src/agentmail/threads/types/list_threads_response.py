# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...types.count import Count
from ...types.last_key import LastKey
from ...types.limit import Limit
from .thread_item import ThreadItem


class ListThreadsResponse(UniversalBaseModel):
    """
    Examples
    --------
    from agentmail.threads import ListThreadsResponse
    from agentmail.threads import ThreadItem
    import datetime
    ListThreadsResponse(threads=[ThreadItem(inbox_id='yourinbox@agentmail.to', thread_id='thread_123', event_id='event_123', labels=['RECEIVED', 'UNREAD'], timestamp=datetime.datetime.fromisoformat("2024-01-15 09:30:00+00:00", ), senders=['alice@example.com', 'bob@example.com'], recipients=['alice@example.com', 'bob@example.com'], message_count=3, subject='Project Discussion', preview="Let's review the timeline for...", ), ThreadItem(inbox_id='yourinbox@agentmail.to', thread_id='thread_456', event_id='event_456', labels=['SENT'], timestamp=datetime.datetime.fromisoformat("2024-01-15 10:15:00+00:00", ), senders=['charlie@example.com'], recipients=['david@example.com'], message_count=1, subject='Weekly Update', preview="Here's what we accomplished...", )], limit=10, count=2, last_key='thread_456#2024-01-15T10:15:00Z', )
    """

    threads: typing.List[ThreadItem] = pydantic.Field()
    """
    Thread items. Ordered by `updated_at` descending.
    """

    count: Count
    limit: typing.Optional[Limit] = None
    last_key: typing.Optional[LastKey] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
